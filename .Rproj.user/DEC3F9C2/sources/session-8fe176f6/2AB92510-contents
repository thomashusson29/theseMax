# ======================================================================
# ANALYSE : Effet de l’isolement sur le ressenti du délai SMUR
# ======================================================================

# --- Packages ----------------------------------------------------------
library(tidyverse)
library(gtsummary)
library(MASS)
library(broom)
library(scales)
library(forcats)

# --- Import ------------------------------------------------------------
df <- read.csv2("Copie de Résultats excel modifié - CopieThomas.csv",
                check.names = FALSE, stringsAsFactors = FALSE)

# --- Préparation des variables ----------------------------------------
d <- df %>%
  mutate(
    iso = factor(`4_Profession_isolee`, levels = c(0, 1),
                 labels = c("Non isolé", "Isolé")),
    ressenti4 = fct_relevel(
      factor(`9_Ressenti_delai_SMUR`),
      "Délai ok",
      "Plutôt bien mais parfois gêné",
      "Délai trop long, en difficulté",
      "Autre"
    ),
    ressenti_bin = if_else(
      `9_Ressenti_delai_SMUR` %in% c("Plutôt bien mais parfois gêné",
                                     "Délai trop long, en difficulté"),
      1L, 0L
    ),
    perte_cat = fct_relevel(
      factor(`10_Delai_d_intervention_:_perte_de_chance_dans_votre_secteur`),
      "non, pas du tout", "Plutôt non", "Plutôt oui", "oui, tout à fait"
    ),
    perte_bin = if_else(
      perte_cat %in% c("Plutôt oui", "oui, tout à fait"), 1L, 0L
    )
  )

# --- Tableaux descriptifs ---------------------------------------------
tbl_ressenti <- tbl_cross(d, row = iso, col = ressenti4, percent = "none") %>%
  modify_caption("Ressenti du délai SMUR (effectifs)")

tbl_perte <- tbl_cross(d, row = iso, col = perte_cat, percent = "none") %>%
  modify_caption("Perte de chance liée au délai (effectifs)")

tbl_ressenti
tbl_perte

# --- Modèles logistiques binaires -------------------------------------
fit_ressenti <- glm(ressenti_bin ~ iso, family = binomial(), data = d)
fit_perte <- glm(perte_bin ~ iso, family = binomial(), data = d)

tbl_ressenti_logit <- tbl_regression(fit_ressenti, exponentiate = TRUE) %>%
  modify_caption("Modèle logistique : ressenti problématique ~ isolement")

tbl_perte_logit <- tbl_regression(fit_perte, exponentiate = TRUE) %>%
  modify_caption("Modèle logistique : perte de chance ~ isolement")

tbl_ressenti_logit
tbl_perte_logit

# --- Modèle ordinal (ressenti 4 niveaux) -------------------------------
d <- d %>%
  mutate(ressenti4_ord = ordered(ressenti4,
                                 levels = c("Délai ok",
                                            "Plutôt bien mais parfois gêné",
                                            "Délai trop long, en difficulté",
                                            "Autre")))

fit_ord <- polr(ressenti4_ord ~ iso, data = d, Hess = TRUE)
broom::tidy(fit_ord, exponentiate = TRUE, conf.int = TRUE)

# --- Graphiques descriptifs --------------------------------------------
# 1) Barres groupées : ressenti
ggplot(df, aes(x = ressenti4, fill = iso)) +
  geom_bar(position = "dodge") +
  labs(x = "Ressenti du délai SMUR", y = "Effectif",
       fill = "Profession", title = "Ressenti selon l’isolement") +
  theme_minimal(base_size = 13) +
  theme(axis.text.x = element_text(angle = 25, hjust = 1))

# 2) Barres groupées : perte de chance
ggplot(df, aes(x = perte_cat, fill = iso)) +
  geom_bar(position = "dodge") +
  labs(x = "Perte de chance liée au délai", y = "Effectif",
       fill = "Profession", title = "Perte de chance selon l’isolement") +
  theme_minimal(base_size = 13) +
  theme(axis.text.x = element_text(angle = 25, hjust = 1))

# --- Prédictions et visualisation des OR -------------------------------
pred_data <- tibble(iso = factor(c("Non isolé", "Isolé"),
                                 levels = c("Non isolé", "Isolé")))

# Probabilité prédite de ressenti problématique
pred_ressenti <- predict(fit_ressenti, newdata = pred_data,
                         type = "link", se.fit = TRUE) %>%
  as_tibble() %>%
  bind_cols(pred_data) %>%
  mutate(prob = plogis(fit),
         lo = plogis(fit - 1.96 * se.fit),
         hi = plogis(fit + 1.96 * se.fit))

ggplot(pred_ressenti, aes(x = iso, y = prob)) +
  geom_col(width = 0.6, fill = "#6baed6") +
  geom_errorbar(aes(ymin = lo, ymax = hi), width = 0.1) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) +
  labs(x = "Profession isolée", y = "Probabilité prédite",
       title = "Ressenti problématique selon l’isolement") +
  theme_minimal(base_size = 13)

# Probabilité prédite de perte de chance
pred_perte <- predict(fit_perte, newdata = pred_data,
                      type = "link", se.fit = TRUE) %>%
  as_tibble() %>%
  bind_cols(pred_data) %>%
  mutate(prob = plogis(fit),
         lo = plogis(fit - 1.96 * se.fit),
         hi = plogis(fit + 1.96 * se.fit))

ggplot(pred_perte, aes(x = iso, y = prob)) +
  geom_col(width = 0.6, fill = "#fc9272") +
  geom_errorbar(aes(ymin = lo, ymax = hi), width = 0.1) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) +
  labs(x = "Profession isolée", y = "Probabilité prédite",
       title = "Perte de chance selon l’isolement") +
  theme_minimal(base_size = 13)

# --- Forest plot des OR ------------------------------------------------
get_or <- function(model, label) {
  broom::tidy(model, conf.int = TRUE, exponentiate = TRUE) %>%
    filter(term == "isoIsolé") %>%
    mutate(Outcome = label)
}

or_df <- bind_rows(
  get_or(fit_ressenti, "Ressenti problématique"),
  get_or(fit_perte, "Perte de chance")
)

ggplot(or_df, aes(x = estimate, y = Outcome)) +
  geom_point(size = 3, color = "#2c7fb8") +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
  geom_vline(xintercept = 1, linetype = 2) +
  scale_x_log10() +
  labs(x = "Odds Ratio (log-échelle)", y = NULL,
       title = "Effet de l’isolement sur le ressenti et la perte de chance") +
  theme_minimal(base_size = 13)

