#scipt claude 26-10
# ============================================================================
# ANALYSE COMPLEMENTAIRE - VARIABLES Q11-18 ET PROFILS DE MEDECINS
# Code standalone partant de df
# ============================================================================

library(dplyr)
library(gtsummary)
library(logistf)
library(FactoMineR)
library(factoextra)

# ============================================================================
# ETAPE 1 : RECUPERATION DES NOMS DE COLONNES EXACTS
# ============================================================================

reseau_pertinent_binaire <- "11_Reseau_MCS_pertinent_pour_La_Reunion_binaire"
derniere_formation_5_ans_binaire <- "12_Dernieres_formations_d_urgence_<_5_ans_binaire_interet"
cabinet_adapte_binaire <- "13_Cabinet_adapte_aux_urgences_binaire"
interet_formation_complementaire_binaire <- "14_Interêt_pour_formation_complementaire_en_urgence"
formation_incite_devenir_MCS_binaire <- names(df)[grep("^15_.*36$", names(df))]
materiel_incite_MCS_binaire <- names(df)[grep("^16_.*38$", names(df))]

motiv_reconnaissance <- names(df)[grep("17__Motivations_MCS:_Reconnaissance", names(df))]
motiv_soutien_materiel <- names(df)[grep("17_Motivations_MCS:_Soutien_et_materiel", names(df))]
motiv_valorisation_financiere <- names(df)[grep("17_Motivations_MCS:_Valorisation_financiere", names(df))]
motiv_formation_accompagnement <- names(df)[grep("17_Motivations_MCS:_Formation_et_accompagnement", names(df))]

frein_charge_travail <- names(df)[grep("18_Freins.*Charge_de_travail", names(df))]
frein_manque_formation <- names(df)[grep("18_Freins.*Manque_de_formation", names(df))]
frein_contraintes_admin <- names(df)[grep("18_Freins.*Contraintes_administratives", names(df))]

# ============================================================================
# PARTIE 1 : STATISTIQUES DESCRIPTIVES
# ============================================================================

# Q11 : Réseau MCS pertinent pour La Réunion
table(df[[reseau_pertinent_binaire]])
round(prop.table(table(df[[reseau_pertinent_binaire]])) * 100, 2)
table(df[[reseau_pertinent_binaire]], df$CJP)
round(prop.table(table(df[[reseau_pertinent_binaire]], df$CJP), margin = 1) * 100, 2)

# Q12 : Formations d'urgence < 5 ans
table(df[[derniere_formation_5_ans_binaire]])
round(prop.table(table(df[[derniere_formation_5_ans_binaire]])) * 100, 2)
table(df[[derniere_formation_5_ans_binaire]], df$CJP)
round(prop.table(table(df[[derniere_formation_5_ans_binaire]], df$CJP), margin = 1) * 100, 2)

# Q13 : Cabinet adapté aux urgences
table(df[[cabinet_adapte_binaire]])
round(prop.table(table(df[[cabinet_adapte_binaire]])) * 100, 2)
table(df[[cabinet_adapte_binaire]], df$CJP)
round(prop.table(table(df[[cabinet_adapte_binaire]], df$CJP), margin = 1) * 100, 2)

# Q14 : Intérêt pour formation complémentaire en urgence
table(df[[interet_formation_complementaire_binaire]])
round(prop.table(table(df[[interet_formation_complementaire_binaire]])) * 100, 2)
table(df[[interet_formation_complementaire_binaire]], df$CJP)
round(prop.table(table(df[[interet_formation_complementaire_binaire]], df$CJP), margin = 1) * 100, 2)

# Q15 : Si plus formé aux urgences, incitation à devenir MCS
table(df[[formation_incite_devenir_MCS_binaire]])
round(prop.table(table(df[[formation_incite_devenir_MCS_binaire]])) * 100, 2)
table(df[[formation_incite_devenir_MCS_binaire]], df$CJP)
round(prop.table(table(df[[formation_incite_devenir_MCS_binaire]], df$CJP), margin = 1) * 100, 2)

# Q16 : Matériel adapté à l'urgence inciterait à devenir MCS
table(df[[materiel_incite_MCS_binaire]])
round(prop.table(table(df[[materiel_incite_MCS_binaire]])) * 100, 2)
table(df[[materiel_incite_MCS_binaire]], df$CJP)
round(prop.table(table(df[[materiel_incite_MCS_binaire]], df$CJP), margin = 1) * 100, 2)

# Motivations individuelles
table(df[[motiv_reconnaissance]])
round(prop.table(table(df[[motiv_reconnaissance]])) * 100, 2)
table(df[[motiv_reconnaissance]], df$CJP)
round(prop.table(table(df[[motiv_reconnaissance]], df$CJP), margin = 1) * 100, 2)

table(df[[motiv_soutien_materiel]])
round(prop.table(table(df[[motiv_soutien_materiel]])) * 100, 2)
table(df[[motiv_soutien_materiel]], df$CJP)
round(prop.table(table(df[[motiv_soutien_materiel]], df$CJP), margin = 1) * 100, 2)

table(df[[motiv_valorisation_financiere]])
round(prop.table(table(df[[motiv_valorisation_financiere]])) * 100, 2)
table(df[[motiv_valorisation_financiere]], df$CJP)
round(prop.table(table(df[[motiv_valorisation_financiere]], df$CJP), margin = 1) * 100, 2)

table(df[[motiv_formation_accompagnement]])
round(prop.table(table(df[[motiv_formation_accompagnement]])) * 100, 2)
table(df[[motiv_formation_accompagnement]], df$CJP)
round(prop.table(table(df[[motiv_formation_accompagnement]], df$CJP), margin = 1) * 100, 2)


# Freins individuels
table(df[[frein_charge_travail]])
round(prop.table(table(df[[frein_charge_travail]])) * 100, 2)
table(df[[frein_charge_travail]], df$CJP)
round(prop.table(table(df[[frein_charge_travail]], df$CJP), margin = 1) * 100, 2)

table(df[[frein_manque_formation]])
round(prop.table(table(df[[frein_manque_formation]])) * 100, 2)
table(df[[frein_manque_formation]], df$CJP)
round(prop.table(table(df[[frein_manque_formation]], df$CJP), margin = 1) * 100, 2)

table(df[[frein_contraintes_admin]])
round(prop.table(table(df[[frein_contraintes_admin]])) * 100, 2)
table(df[[frein_contraintes_admin]], df$CJP)
round(prop.table(table(df[[frein_contraintes_admin]], df$CJP), margin = 1) * 100, 2)

# Scores agrégés de motivations et freins
score_motivations <- df[[motiv_reconnaissance]] + df[[motiv_soutien_materiel]] + df[[motiv_valorisation_financiere]] + df[[motiv_formation_accompagnement]]
score_freins <- df[[frein_charge_travail]] + df[[frein_manque_formation]] + df[[frein_contraintes_admin]]

table(score_motivations)
summary(score_motivations)
round(prop.table(table(score_motivations)) * 100, 2)
table(score_motivations, df$CJP)
round(prop.table(table(score_motivations, df$CJP), margin = 1) * 100, 2)
tapply(score_motivations, df$CJP, mean, na.rm = TRUE)
tapply(score_motivations, df$CJP, sd, na.rm = TRUE)

table(score_freins)
summary(score_freins)
round(prop.table(table(score_freins)) * 100, 2)
table(score_freins, df$CJP)
round(prop.table(table(score_freins, df$CJP), margin = 1) * 100, 2)
tapply(score_freins, df$CJP, mean, na.rm = TRUE)
tapply(score_freins, df$CJP, sd, na.rm = TRUE)

# ============================================================================
# PARTIE 2 : ANALYSE UNIVARIEE (Tests Chi2/Fisher et OR bruts)
# ============================================================================

# Q11 vs CJP
test_q11 <- chisq.test(df[[reseau_pertinent_binaire]], df$CJP)
test_q11
or_q11 <- (20*1) / (29*5)
ic_q11_inf <- exp(log(or_q11) - 1.96 * sqrt(1/20 + 1/1 + 1/29 + 1/5))
ic_q11_sup <- exp(log(or_q11) + 1.96 * sqrt(1/20 + 1/1 + 1/29 + 1/5))
or_q11
ic_q11_inf
ic_q11_sup

# Q12 vs CJP
test_q12 <- chisq.test(df[[derniere_formation_5_ans_binaire]], df$CJP)
test_q12
tab_q12 <- table(df[[derniere_formation_5_ans_binaire]], df$CJP)
tab_q12
or_q12 <- (tab_q12[2,2] * tab_q12[1,1]) / (tab_q12[2,1] * tab_q12[1,2])
ic_q12_inf <- exp(log(or_q12) - 1.96 * sqrt(1/tab_q12[2,2] + 1/tab_q12[1,1] + 1/tab_q12[2,1] + 1/tab_q12[1,2]))
ic_q12_sup <- exp(log(or_q12) + 1.96 * sqrt(1/tab_q12[2,2] + 1/tab_q12[1,1] + 1/tab_q12[2,1] + 1/tab_q12[1,2]))
or_q12
ic_q12_inf
ic_q12_sup

# Q13 vs CJP
test_q13 <- chisq.test(df[[cabinet_adapte_binaire]], df$CJP)
test_q13
tab_q13 <- table(df[[cabinet_adapte_binaire]], df$CJP)
tab_q13
or_q13 <- (tab_q13[2,2] * tab_q13[1,1]) / (tab_q13[2,1] * tab_q13[1,2])
ic_q13_inf <- exp(log(or_q13) - 1.96 * sqrt(1/tab_q13[2,2] + 1/tab_q13[1,1] + 1/tab_q13[2,1] + 1/tab_q13[1,2]))
ic_q13_sup <- exp(log(or_q13) + 1.96 * sqrt(1/tab_q13[2,2] + 1/tab_q13[1,1] + 1/tab_q13[2,1] + 1/tab_q13[1,2]))
or_q13
ic_q13_inf
ic_q13_sup

# Q14 vs CJP (utiliser Fisher car effectif théorique < 5)
test_q14 <- fisher.test(df[[interet_formation_complementaire_binaire]], df$CJP)
test_q14

# Q15 vs CJP
test_q15 <- chisq.test(df[[formation_incite_devenir_MCS_binaire]], df$CJP)
test_q15
tab_q15 <- table(df[[formation_incite_devenir_MCS_binaire]], df$CJP)
tab_q15
or_q15 <- (tab_q15[2,2] * tab_q15[1,1]) / (tab_q15[2,1] * tab_q15[1,2])
ic_q15_inf <- exp(log(or_q15) - 1.96 * sqrt(1/tab_q15[2,2] + 1/tab_q15[1,1] + 1/tab_q15[2,1] + 1/tab_q15[1,2]))
ic_q15_sup <- exp(log(or_q15) + 1.96 * sqrt(1/tab_q15[2,2] + 1/tab_q15[1,1] + 1/tab_q15[2,1] + 1/tab_q15[1,2]))
or_q15
ic_q15_inf
ic_q15_sup

# Q16 vs CJP
test_q16 <- chisq.test(df[[materiel_incite_MCS_binaire]], df$CJP)
test_q16
tab_q16 <- table(df[[materiel_incite_MCS_binaire]], df$CJP)
tab_q16
or_q16 <- (tab_q16[2,2] * tab_q16[1,1]) / (tab_q16[2,1] * tab_q16[1,2])
ic_q16_inf <- exp(log(or_q16) - 1.96 * sqrt(1/tab_q16[2,2] + 1/tab_q16[1,1] + 1/tab_q16[2,1] + 1/tab_q16[1,2]))
ic_q16_sup <- exp(log(or_q16) + 1.96 * sqrt(1/tab_q16[2,2] + 1/tab_q16[1,1] + 1/tab_q16[2,1] + 1/tab_q16[1,2]))
or_q16
ic_q16_inf
ic_q16_sup

# Motivations vs CJP
test_motiv1 <- chisq.test(df[[motiv_reconnaissance]], df$CJP)
test_motiv1
tab_motiv1 <- table(df[[motiv_reconnaissance]], df$CJP)
or_motiv1 <- (tab_motiv1[2,2] * tab_motiv1[1,1]) / (tab_motiv1[2,1] * tab_motiv1[1,2])
or_motiv1

test_motiv2 <- chisq.test(df[[motiv_soutien_materiel]], df$CJP)
test_motiv2
tab_motiv2 <- table(df[[motiv_soutien_materiel]], df$CJP)
or_motiv2 <- (tab_motiv2[2,2] * tab_motiv2[1,1]) / (tab_motiv2[2,1] * tab_motiv2[1,2])
or_motiv2

test_motiv3 <- chisq.test(df[[motiv_valorisation_financiere]], df$CJP)
test_motiv3
tab_motiv3 <- table(df[[motiv_valorisation_financiere]], df$CJP)
or_motiv3 <- (tab_motiv3[2,2] * tab_motiv3[1,1]) / (tab_motiv3[2,1] * tab_motiv3[1,2])
or_motiv3

test_motiv4 <- chisq.test(df[[motiv_formation_accompagnement]], df$CJP)
test_motiv4
tab_motiv4 <- table(df[[motiv_formation_accompagnement]], df$CJP)
or_motiv4 <- (tab_motiv4[2,2] * tab_motiv4[1,1]) / (tab_motiv4[2,1] * tab_motiv4[1,2])
or_motiv4


# Freins vs CJP
test_frein1 <- fisher.test(df[[frein_charge_travail]], df$CJP)
test_frein1

test_frein2 <- chisq.test(df[[frein_manque_formation]], df$CJP)
test_frein2
tab_frein2 <- table(df[[frein_manque_formation]], df$CJP)
or_frein2 <- (tab_frein2[2,2] * tab_frein2[1,1]) / (tab_frein2[2,1] * tab_frein2[1,2])
or_frein2

test_frein3 <- chisq.test(df[[frein_contraintes_admin]], df$CJP)
test_frein3
tab_frein3 <- table(df[[frein_contraintes_admin]], df$CJP)
or_frein3 <- (tab_frein3[2,2] * tab_frein3[1,1]) / (tab_frein3[2,1] * tab_frein3[1,2])
or_frein3

# Scores vs CJP (test de Student pour comparer moyennes)
t.test(score_motivations ~ df$CJP)
t.test(score_freins ~ df$CJP)

# ============================================================================
# PARTIE 3 : ANALYSE MULTIVARIEE (Régression logistique de Firth)
# ============================================================================

df_regression <- data.frame(
  CJP = df$CJP,
  Q11_reseau = df[[reseau_pertinent_binaire]],
  Q12_formation_recente = df[[derniere_formation_5_ans_binaire]],
  Q13_cabinet_adapte = df[[cabinet_adapte_binaire]],
  Q14_interet_formation = df[[interet_formation_complementaire_binaire]],
  Q15_formation_incite = df[[formation_incite_devenir_MCS_binaire]],
  Q16_materiel_incite = df[[materiel_incite_MCS_binaire]],
  Motiv_reconnaissance = df[[motiv_reconnaissance]],
  Motiv_soutien = df[[motiv_soutien_materiel]],
  Motiv_financiere = df[[motiv_valorisation_financiere]],
  Motiv_formation = df[[motiv_formation_accompagnement]],
  Frein_charge = df[[frein_charge_travail]],
  Frein_formation = df[[frein_manque_formation]],
  Frein_admin = df[[frein_contraintes_admin]],
  Score_motivations = score_motivations,
  Score_freins = score_freins
)

# Modèle 1 : Variables Q11-16
model_firth_q11_16 <- logistf(
  CJP ~ Q11_reseau + Q12_formation_recente + Q13_cabinet_adapte + 
    Q14_interet_formation + Q15_formation_incite + Q16_materiel_incite,
  data = df_regression
)
summary(model_firth_q11_16)

# Modèle 2 : Motivations individuelles
model_firth_motivations <- logistf(
  CJP ~ Motiv_reconnaissance + Motiv_soutien + Motiv_financiere + 
    Motiv_formation + Motiv_autre,
  data = df_regression
)
summary(model_firth_motivations)

# Modèle 3 : Freins individuels
model_firth_freins <- logistf(
  CJP ~ Frein_charge + Frein_formation + Frein_admin + Frein_autre,
  data = df_regression
)
summary(model_firth_freins)

# Modèle 4 : Scores agrégés
model_firth_scores <- logistf(
  CJP ~ Score_motivations + Score_freins,
  data = df_regression
)
summary(model_firth_scores)

# Modèle 5 : Complet (toutes variables)
model_firth_complet <- logistf(
  CJP ~ Q11_reseau + Q12_formation_recente + Q13_cabinet_adapte + 
    Q14_interet_formation + Q15_formation_incite + Q16_materiel_incite +
    Motiv_reconnaissance + Motiv_soutien + Motiv_financiere + 
    Motiv_formation + Motiv_autre +
    Frein_charge + Frein_formation + Frein_admin + Frein_autre,
  data = df_regression
)
summary(model_firth_complet)

# Modèle 6 : Parcimonieux (avec scores)
model_firth_parcimonieux <- logistf(
  CJP ~ Q11_reseau + Q13_cabinet_adapte + Q14_interet_formation + 
    Q15_formation_incite + Q16_materiel_incite +
    Score_motivations + Score_freins,
  data = df_regression
)
summary(model_firth_parcimonieux)

# ============================================================================
# PARTIE 4 : IDENTIFICATION DE PROFILS DE MEDECINS
# ============================================================================

df_profils <- data.frame(
  Connaissance_MCS = df$`1_Connaissance_MCS_binaire`,
  Sexe_Homme = df$`2_Sexe_Homme`,
  Age_inf_50 = df$`3_Age_inf_50a`,
  Profession_isolee = df$`4_Profession_isolee`,
  Duree_install_inf_10 = df$`6_Duree_d_installation_inf_10ans`,
  Activite_autre = df$`7_Activite_autre_que_liberal_exclusif`,
  Cs_rdv = df$`8__consultations_rdv`,
  Cs_sans_rdv = df$`8__consultations_sans_rdv_`,
  Creneaux_urgence = df$`8_consultations_:_creneaux_d_urgence`,
  Visites = df$`8_Visites`,
  CJP = df$CJP
)

summary(df_profils)

# ACM (Analyse des Correspondances Multiples)
df_acm <- df_profils[, 1:10]
df_acm[] <- lapply(df_acm, as.factor)

acm_resultat <- MCA(df_acm, graph = FALSE, ncp = 5)
acm_resultat$eig
acm_resultat$var$contrib

# Classification Ascendante Hiérarchique (CAH)
dist_matrix <- dist(acm_resultat$ind$coord[, 1:3])
cah_resultat <- hclust(dist_matrix, method = "ward.D2")

# 3 groupes
groupes <- cutree(cah_resultat, k = 3)
df_profils$Groupe <- as.factor(groupes)
table(df_profils$Groupe)
table(df_profils$Groupe, df_profils$CJP)
prop.table(table(df_profils$Groupe, df_profils$CJP), margin = 1) * 100
chisq.test(df_profils$Groupe, df_profils$CJP)

# Caractérisation des 3 groupes
colMeans(df_profils[df_profils$Groupe == 1, 1:10], na.rm = TRUE)
colMeans(df_profils[df_profils$Groupe == 2, 1:10], na.rm = TRUE)
colMeans(df_profils[df_profils$Groupe == 3, 1:10], na.rm = TRUE)

# 2 groupes
groupes_2 <- cutree(cah_resultat, k = 2)
df_profils$Groupe_2 <- as.factor(groupes_2)
table(df_profils$Groupe_2, df_profils$CJP)
prop.table(table(df_profils$Groupe_2, df$CJP), margin = 1) * 100
chisq.test(df_profils$Groupe_2, df_profils$CJP)
colMeans(df_profils[df_profils$Groupe_2 == 1, 1:10], na.rm = TRUE)
colMeans(df_profils[df_profils$Groupe_2 == 2, 1:10], na.rm = TRUE)

# 4 groupes
groupes_4 <- cutree(cah_resultat, k = 4)
df_profils$Groupe_4 <- as.factor(groupes_4)
table(df_profils$Groupe_4, df_profils$CJP)
prop.table(table(df_profils$Groupe_4, df_profils$CJP), margin = 1) * 100
chisq.test(df_profils$Groupe_4, df_profils$CJP)
colMeans(df_profils[df_profils$Groupe_4 == 1, 1:10], na.rm = TRUE)
colMeans(df_profils[df_profils$Groupe_4 == 2, 1:10], na.rm = TRUE)
colMeans(df_profils[df_profils$Groupe_4 == 3, 1:10], na.rm = TRUE)
colMeans(df_profils[df_profils$Groupe_4 == 4, 1:10], na.rm = TRUE)

# ============================================================================
# PARTIE 5 : TABLEAUX RECAPITULATIFS avec gtsummary
# ============================================================================

# Tableau 1 : Variables Q11-16 selon CJP
df_table1 <- data.frame(
  CJP = factor(df$CJP, levels = c(0, 1), labels = c("Non intéressé", "Intéressé")),
  Reseau_pertinent = factor(df[[reseau_pertinent_binaire]], levels = c(0, 1), labels = c("Non", "Oui")),
  Formation_recente = factor(df[[derniere_formation_5_ans_binaire]], levels = c(0, 1), labels = c("Non", "Oui")),
  Cabinet_adapte = factor(df[[cabinet_adapte_binaire]], levels = c(0, 1), labels = c("Non", "Oui")),
  Interet_formation = factor(df[[interet_formation_complementaire_binaire]], levels = c(0, 1), labels = c("Non", "Oui")),
  Formation_incite = factor(df[[formation_incite_devenir_MCS_binaire]], levels = c(0, 1), labels = c("Non", "Oui")),
  Materiel_incite = factor(df[[materiel_incite_MCS_binaire]], levels = c(0, 1), labels = c("Non", "Oui"))
)

table1_summary <- df_table1 %>%
  tbl_summary(
    by = CJP,
    statistic = list(all_categorical() ~ "{n} ({p}%)"),
    digits = all_categorical() ~ c(0, 1)
  ) %>%
  add_p(test = all_categorical() ~ "chisq.test") %>%
  add_overall()

table1_summary

# Tableau 2 : Motivations selon CJP
df_table2 <- data.frame(
  CJP = factor(df$CJP, levels = c(0, 1), labels = c("Non intéressé", "Intéressé")),
  Motiv_reconnaissance = factor(df[[motiv_reconnaissance]], levels = c(0, 1), labels = c("Non", "Oui")),
  Motiv_soutien = factor(df[[motiv_soutien_materiel]], levels = c(0, 1), labels = c("Non", "Oui")),
  Motiv_financiere = factor(df[[motiv_valorisation_financiere]], levels = c(0, 1), labels = c("Non", "Oui")),
  Motiv_formation = factor(df[[motiv_formation_accompagnement]], levels = c(0, 1), labels = c("Non", "Oui")),
)

table2_summary <- df_table2 %>%
  tbl_summary(
    by = CJP,
    statistic = list(all_categorical() ~ "{n} ({p}%)"),
    digits = all_categorical() ~ c(0, 1)
  ) %>%
  add_p(test = all_categorical() ~ "chisq.test") %>%
  add_overall()

table2_summary

# Tableau 3 : Freins selon CJP
df_table3 <- data.frame(
  CJP = factor(df$CJP, levels = c(0, 1), labels = c("Non intéressé", "Intéressé")),
  Frein_charge = factor(df[[frein_charge_travail]], levels = c(0, 1), labels = c("Non", "Oui")),
  Frein_formation = factor(df[[frein_manque_formation]], levels = c(0, 1), labels = c("Non", "Oui")),
  Frein_admin = factor(df[[frein_contraintes_admin]], levels = c(0, 1), labels = c("Non", "Oui")),
)

table3_summary <- df_table3 %>%
  tbl_summary(
    by = CJP,
    statistic = list(all_categorical() ~ "{n} ({p}%)"),
    digits = all_categorical() ~ c(0, 1)
  ) %>%
  add_p(test = all_categorical() ~ "chisq.test") %>%
  add_overall()

table3_summary

# Tableau 4 : Scores moyens
df_table4 <- data.frame(
  CJP = factor(df$CJP, levels = c(0, 1), labels = c("Non intéressé", "Intéressé")),
  Score_motivations = score_motivations,
  Score_freins = score_freins
)

table4_summary <- df_table4 %>%
  tbl_summary(
    by = CJP,
    statistic = list(all_continuous() ~ "{mean} ({sd})"),
    digits = all_continuous() ~ 2
  ) %>%
  add_p(test = all_continuous() ~ "t.test") %>%
  add_overall()

table4_summary

# Tableau 5 : Profils de médecins selon CJP (3 groupes)
df_table5 <- data.frame(
  CJP = factor(df$CJP, levels = c(0, 1), labels = c("Non intéressé", "Intéressé")),
  Groupe = factor(df_profils$Groupe, levels = c(1, 2, 3), labels = c("Groupe 1", "Groupe 2", "Groupe 3"))
)

table5_summary <- df_table5 %>%
  tbl_summary(
    by = CJP,
    statistic = list(all_categorical() ~ "{n} ({p}%)"),
    digits = all_categorical() ~ c(0, 1)
  ) %>%
  add_p(test = all_categorical() ~ "chisq.test") %>%
  add_overall()

table5_summary

# ============================================================================
# PARTIE 6 : RESUME DES RESULTATS PRINCIPAUX
# ============================================================================

# Tableau récapitulatif des p-values en univarié
p_values_univariee <- data.frame(
  Variable = c("Q11_reseau", "Q12_formation", "Q13_cabinet", "Q14_interet_formation", 
               "Q15_formation_incite", "Q16_materiel_incite",
               "Motiv_reconnaissance", "Motiv_soutien", "Motiv_financiere", "Motiv_formation", "Motiv_autre",
               "Frein_charge", "Frein_formation", "Frein_admin", "Frein_autre",
               "Score_motivations", "Score_freins"),
  P_value = c(
    test_q11$p.value, test_q12$p.value, test_q13$p.value, test_q14$p.value,
    test_q15$p.value, test_q16$p.value,
    test_motiv1$p.value, test_motiv2$p.value, test_motiv3$p.value, test_motiv4$p.value, test_motiv5$p.value,
    test_frein1$p.value, test_frein2$p.value, test_frein3$p.value, test_frein4$p.value,
    0.0013, 0.0311
  ),
  Significatif = c(
    test_q11$p.value < 0.05, test_q12$p.value < 0.05, test_q13$p.value < 0.05, test_q14$p.value < 0.05,
    test_q15$p.value < 0.05, test_q16$p.value < 0.05,
    test_motiv1$p.value < 0.05, test_motiv2$p.value < 0.05, test_motiv3$p.value < 0.05, 
    test_motiv4$p.value < 0.05, test_motiv5$p.value < 0.05,
    test_frein1$p.value < 0.05, test_frein2$p.value < 0.05, test_frein3$p.value < 0.05, 
    test_frein4$p.value < 0.05,
    TRUE, TRUE
  )
)

p_values_univariee

# Variables significatives en univarié (p < 0.05)
p_values_univariee[p_values_univariee$Significatif == TRUE, ]

# OR ajustés du modèle avec scores (exponentiation des coefficients)
exp(model_firth_scores$coefficients)

# Association Groupes vs CJP
table(df_profils$Groupe, df_profils$CJP)
prop.table(table(df_profils$Groupe, df_profils$CJP), margin = 1) * 100